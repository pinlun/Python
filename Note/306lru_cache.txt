lru_cache
緩存是一種將定量數據加以保存以備迎合後續請求的處理，也就是加快數據的檢索速度。
透過lru_cache可以緩存數據並提高程式執行效率，特別適合使用在耗時的函式。
lru_cache為在functool這個模組中的裝飾器，且只能在python3使用，python2需要安裝
functools32。
@functools.lru_cache(maxsize=None, typed=False)
參數maxsize為最多的緩存次數，預設None為無限制，最好設置為2的倍數，而typed=True
則是將不同參數類型的使用分別緩存，如f(3)和f(3.0)。範例如下
>>> from functools import lru_cache
>>> @lru_cache(None)
... def add(x, y):
...     print("calculating: %s + %s" % (x, y))
...     return x + y

>>> print(add(1, 2))
calculating: 1 + 2
3

>>> print(add(2, 3))
calculating: 2 + 3
5

>>> print(add(1, 2))
3

這個裝飾器還提供 cache_clear()用於清理緩存和cache_info()用於查看緩存訊息。
案例如下
>>> @lru_cache(maxsize=None)
>>> def fib(n):
...     if n < 2:
...         return n
...     return fib(n-1) + fib(n-2)

>>> [fib(n) for n in range(16)]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]

>>> fib.cache_info()
CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)
